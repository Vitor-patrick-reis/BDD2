-- HABILITA O CONTEXTO
USE EMPRESACJ3029352;
GO

-- CRIAR A TABELA DEPENDENTES
CREATE TABLE DEPENDENTES (
	CODDEPENDENTE INT PRIMARY KEY,
	NOME VARCHAR(35) NOT NULL,
	SEXO CHAR(1) NULL,
	DATANASCIMENTO DATE NOT NULL,
	ID INT FOREIGN KEY REFERENCES
FUNCIONARIOS(ID)
);
GO

-- EXIBE O REGISTRO DEPENDENTES
SELECT * FROM DEPENDENTES;
GO

-- ALTERA O FORMATO DA DATA NO SQL SERVER
SET DATEFORMAT DMY;
GO

-- INSERE OS DADOS NA TABELA DEPENDENTES, UTILIZANDO OS DADOS PROVENIENTES DO ARQUIVO
-- 'DEPENDENTES.CSV', FUNCIONA APENAS EM SERVIDOR "MAC/LINUX"
BULK INSERT DEPENDENTES
	FROM '/DADOS/DEPENDENTES.CSV'
WITH (
	FIRSTROW = 2,
	DATAFILETYPE = 'WIDECHAR',
	FIELDTERMINATOR = ','
);
GO

-- EXIBE O REGISTRO DEPENDENTES
SELECT * FROM DEPENDENTES;
GO

-- INSERE OS DADOS NA TABELA DEPENDENTES, UTILIZANDO OS DADOS PROVENIENTES DO ARQUIVO
-- 'DEPENDENTES.CSV', FUNCIONA APENAS EM SERVIDOR "WINDOWS"
BULK INSERT DEPENDENTES
	FROM N'.../DADOS/DEPENDENTES.CSV'
WITH (
	FIRSTROW = 2,
	DATAFILETYPE = 'WIDECHAR',
	FIELDTERMINATOR = ',',
	CODEPAGE = '65001'
);
GO

-------------------------------
-- JUNÇÕES DE TABELA (JOINS)
-------------------------------

-- EXIBE TODOS OS REGISTROS DA TABELA FUNCIONARIOS
SELECT * FROM FUNCIONARIOS;
GO

-- EXIBE TODOS OS CAMPOS DA TABELA DEPENDENTES
SELECT * FROM DEPENDENTES;
GO

-- REALIZA A JUNÇÃO CRUZADA ENTRE OS DADOS DAS TABELAS FUNCIONARIOS E DEPENDENTES
-- "VERSÃO 1:" SINTAXE ANTIGA
SELECT * FROM FUNCIONARIOS,
			  DEPENDENTES;
GO

-- REALIZA A JUNÇÃO CRUZADA ENTRE OS DADOS DAS TABELAS FUNCIONARIOS E DEPENDENTES
-- "VERSÃO 2:" SINTAXE ANTIGA
SELECT * FROM FUNCIONARIOS CROSS JOIN
			  DEPENDENTES;
GO

-- REALIZA A JUNÇÃO CRUZADA ENTRE OS DADOS DAS TABELAS FUNCIONARIOS E DEPENDENTES
-- UTILIZANDO UM ALIAS PARA NOMEAR CADA TABELE
SELECT F ID   AS 'CODIGO DO FUNCIONARIO',
       F NOME AS 'NOME DO FUNCIONARIO',
	   D NOME  AS 'NOME DO DEPENDENTE',
	   D DATANASCIMENTO AS 'DATA DE NASCIMENTO'
FROM FUNCIONARIOS F CROSS JOIN DEPENDENTES D;
GO

-- EXIBE O ID NOME, SALARIO DOS FUNCIONARIOS JUNTO COM O NOME DO DEPENDENTE E O CODIGO DO RESPONSAVEL 
	-- POR ELE EXIBE SOMENTE O REGISTRO DO FUNCIONARIO QUE POSSUI DEPENDENTE.
	SELECT F.ID		 AS 'CODIGO DO FUNCIONARIO',
		F.NOME	 AS 'NOME DO FUNCIONARIO',
		F.SALARIO AS 'SALARIO',
		D.NOME	 AS 'NOME DO DEPENDENTE',
		D.ID		 AS 'CODIGO DO RESPONSAVEL'
	FROM FUNCIONARIOS F JOIN DEPENDENTES D 
		ON F.ID = D.ID;
	GO

-- EXIBE OS DADOS DOS FUNCIONARIOS E DE SEUS DEPENDENTES UTILIZANDO ALIASE PARA NOMEAR
-- CADA COLUNA. ORDENA O RESULTADO PELO NOME DO FUNCIONARIO E DO DEPENDENTE 
-- EXIBE SOMENTE OS REGISTROS DOS DEPENDENTES QUE NASCERAM A PARTIR DO ANO 2000.
SELECT F.ID		    AS 'CODIGO DO FUNCIONARIO',
	F.NOME		    AS 'NOME DO FUNCIONARIO',
	F.SALARIO	    AS 'SALARIO',
	D.NOME		    AS 'NOME DO DEPENDENTE',
	D.DATANASCIMENTO AS 'DATA DE NASCIMENTO',
	D.ID			    AS 'CODIGO DO RESPONSAVEL'
FROM FUNCIONARIOS F INNER JOIN DEPENDENTES D 
	ON F.ID = D.ID
WHERE YEAR (D.DATANASCIMENTO) >= 2000
ORDER BY F.NOME, D.NOME;
GO

--INSERE MAIS CINCO NOVOS FUNCIONARIOS
INSERT INTO FUNCIONARIOS VALUES
	(11, 'ANA CLAUDIA', 'F',  '12/09/2001', 4900.00, '3663-9090'),
	(11, 'ANDRE LIMA', 'M',   '11/10/2009', 4300.00, '3663-9090'),
	(11, 'MARCOS SOUZA', 'M', '07/02/2010', 2300.00, NULL),
	(11, 'MARIANA GOME', 'F', '12/01/2003', 12000.00, '3663-9090'),
	(11, 'CINTIA FARIA', 'F', '09/09/2005', 1450.00, NULL);
GO

-- EXIBE AS INFORMAÇOES DE TODOS OS FUNCIONARIOS, INCLUSIVE DAQUELES QUE NÃO POSSUEM NENHUM DEPENDENTE.
SELECT F.ID		     AS 'ID',
	F.NOME		     AS 'FUNCIONARIO',
	F.ADMISSAO	     AS 'ADMISSÃO',
	F.SALARIO	     AS 'SALÁRIO',
	D.NOME		     AS 'DEPENDENTE',
	D.DATANASCIMENTO AS 'DATA DE NASCIMENTO'
FROM FUNCIONARIOS F LEFT OUTER JOIN DEPENDENTES D 
	ON F.ID = D.ID
GO

-- EXIBE AS INFORMAÇOES DE TODOS OS FUNCIONARIOS, QUE NÃO POSSUEM NENHUM DEPENDENTE.
SELECT F.ID		     AS 'ID',
	F.NOME		     AS 'FUNCIONARIO',
	F.ADMISSAO	     AS 'ADMISSÃO',
	F.SALARIO	     AS 'SALÁRIO',
	D.NOME		     AS 'DEPENDENTE',
	D.DATANASCIMENTO AS 'DATA DE NASCIMENTO'
FROM FUNCIONARIOS F LEFT OUTER JOIN DEPENDENTES D 
	ON F.ID = D.ID
WHERE D.NOME IS NULL;
GO

-- EXIBE AS INFORMAÇOES DE TODOS OS FUNCIONARIOS, E DE SEUS DEPENDENTES UTILIZANDO O RIGHT JOIN.
SELECT F.ID		     AS 'ID',
	F.NOME		     AS 'FUNCIONARIO',
	F.ADMISSAO	     AS 'ADMISSÃO',
	F.SALARIO	     AS 'SALÁRIO',
	D.NOME		     AS 'DEPENDENTE',
	D.DATANASCIMENTO AS 'DATA DE NASCIMENTO'
FROM DEPENDENTES D RIGHT OUTER JOIN  FUNCIONARIOS F
	ON F.ID = D.ID;
GO

-- EXIBE AS INFORMAÇOES DE TODOS OS FUNCIONARIOS, E DE SEUS DEPENDENTES UTILIZANDO O FULL JOIN.
SELECT F.ID		     AS 'ID',
	F.NOME		     AS 'FUNCIONARIO',
	F.ADMISSAO	     AS 'ADMISSÃO',
	F.SALARIO	     AS 'SALÁRIO',
	D.NOME		     AS 'DEPENDENTE',
	D.DATANASCIMENTO AS 'DATA DE NASCIMENTO'
FROM FUNCIONARIOS F FULL OUTER JOIN  DEPENDENTES D
	ON F.ID = D.ID;
GO

-- EXIBE O TOTAL DE DEPENDENTES DE CADA FUNCIONARIO.
SELECT F.ID     AS 'ID',
F.NOME      AS 'FUNCIONARIO',
COUNT(F.ID) AS 'TOTAL DE DEPENDENTES'
FROM FUNCIONARIOS F INNER JOIN DEPENDENTES D
ON F.ID = D.ID
GROUP BY F.ID, F.NOME;
GO

-- EXIBE O TOTAL DE DEPENDENTES DE CADA FUNCIONARIO, (SINTAXE CORRETA).
SELECT    F.ID     AS 'ID',
      F.NOME   AS 'FUNCIONARIO',
   COUNT(F.ID) AS 'TOTAL DE DEPENDENTES'
FROM FUNCIONARIOS F FULL OUTER JOIN DEPENDENTES D
ON F.ID = D.ID
GROUP BY F.ID, F.NOME;
GO





	
